# -*- coding: utf-8 -*-
"""AIMLSession27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LTHVrNsmTZB4sPWK0DFcTJnwPYh47VTt
"""

data = [
    {'message':'i like the movie','sentiment':'positive'},
    {'message':'movie is not good','sentiment':'negative'},
    {'message':'wasted my time','sentiment':'negative'},
    {'message':'liked the movie','sentiment':'positive'}
]

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer

df = pd.DataFrame(data)

df.head()

count_vectorizer = CountVectorizer()

count_vectorizer_embeddings = count_vectorizer.fit_transform(df['message']).toarray()

count_vectorizer_df = pd.DataFrame(count_vectorizer_embeddings,columns=count_vectorizer.get_feature_names_out())

count_vectorizer_df

X = df['message']  #X
y = df['sentiment']  #y

X

count_vect = CountVectorizer()
count_vect_embedd = count_vect.fit_transform(X).toarray()

count_vect_embedd

from sklearn.svm import SVC

svc = SVC(kernel='linear', random_state=0)
svc.fit(count_vect_embedd, y)

m1 = 'movie is worst'
m1 = count_vect.transform([m1]).toarray()

print(svc.predict(m1)[0])

df

from sklearn.feature_extraction.text import TfidfVectorizer
vectorizer_tf = TfidfVectorizer()
tfidf_matrix = vectorizer_tf.fit_transform(df['message'])
tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=vectorizer_tf.get_feature_names_out())
tfidf_df

sv = SVC(kernel='linear', random_state=0)
sv.fit(tfidf_matrix, y)

m1 = 'movie is worst'
m1 = vectorizer_tf.transform([m1]).toarray()

print(sv.predict(m1)[0])

sv.score(tfidf_matrix,y)

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

df = pd.read_csv('spam.csv',encoding='latin-1')
df.head()

df = df[['v2','v1']]
df.head()

df.rename(columns={'v2':'message','v1':'sentiment'},inplace=True)

df.head()

cnt_vectorizer = CountVectorizer()
cnt_vectorizer_embedd = cnt_vectorizer.fit_transform(df['message']).toarray()
cnt_vectorizer_df = pd.DataFrame(cnt_vectorizer_embedd,columns=cnt_vectorizer.get_feature_names_out())
cnt_vectorizer_df.head()

cnt_vectorizer_df.shape

X_train,X_test,y_train,y_test = train_test_split(cnt_vectorizer_df,df['sentiment'],test_size=0.2,random_state=42)

svc = SVC(kernel='linear',random_state=0)
svc.fit(X_train,y_train)

y_pred = svc.predict(X_test)

accuracy_score(y_test,y_pred)

import gensim
from gensim.models import Word2Vec
import numpy as np
sentences = df['message'].apply(gensim.utils.simple_preprocess)
word2vec_model = Word2Vec(sentences, vector_size=100, window=5, min_count=1,workers = 4)

def get_average_word2vec(sentence,model):
  embeddings = [model.wv[word] for word in sentence if word in model.wv]
  if embeddings:
    return np.mean(embeddings,axis=0)
  else:
    return np.zeros(model.vector_size)

word2vec_embeddings = sentences.apply(lambda x: get_average_word2vec(x,word2vec_model))

word2_vec_df=pd.DataFrame(word2vec_embeddings.tolist())
word2_vec_df

